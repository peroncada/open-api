{
    "components": {
        "examples": {},
        "headers": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
            "Time": {
                "properties": {
                    "hour": {
                        "type": "number",
                        "format": "double"
                    },
                    "minute": {
                        "type": "number",
                        "format": "double"
                    },
                    "second": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "hour",
                    "minute",
                    "second"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "Day": {
                "properties": {
                    "day_of_week": {
                        "type": "number",
                        "format": "double"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "start_time": {
                        "$ref": "#/components/schemas/Time"
                    },
                    "end_time": {
                        "$ref": "#/components/schemas/Time"
                    }
                },
                "required": [
                    "day_of_week",
                    "active",
                    "start_time",
                    "end_time"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "ScheduleGrid": {
                "properties": {
                    "week": {
                        "items": {
                            "$ref": "#/components/schemas/Day"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "week"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "Campaign": {
                "properties": {
                    "id": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "campaign_type_id": {
                        "type": "number",
                        "format": "double"
                    },
                    "billing_code": {
                        "type": "string"
                    },
                    "country_id": {
                        "type": "number",
                        "format": "double"
                    },
                    "state_id": {
                        "type": "number",
                        "format": "double"
                    },
                    "city_id": {
                        "type": "number",
                        "format": "double"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "pause_plan_id": {
                        "type": "number",
                        "format": "double"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "outbound_method": {
                        "type": "number",
                        "format": "double"
                    },
                    "max_channel_ocuppancy": {
                        "type": "number",
                        "format": "double"
                    },
                    "analysis_period": {
                        "type": "number",
                        "format": "double"
                    },
                    "time_target_in_att_matrix": {
                        "type": "number",
                        "format": "double"
                    },
                    "time_target_agent_idle": {
                        "type": "number",
                        "format": "double"
                    },
                    "always_use_max_channels": {
                        "type": "boolean"
                    },
                    "percentage_aggressiveness": {
                        "type": "number",
                        "format": "double"
                    },
                    "working_schedule": {
                        "$ref": "#/components/schemas/ScheduleGrid"
                    },
                    "dialing_schedule": {
                        "$ref": "#/components/schemas/ScheduleGrid"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "code",
                    "description",
                    "campaign_type_id",
                    "billing_code",
                    "country_id",
                    "state_id",
                    "city_id",
                    "start_date",
                    "end_date",
                    "pause_plan_id",
                    "active",
                    "outbound_method",
                    "max_channel_ocuppancy",
                    "analysis_period",
                    "time_target_in_att_matrix",
                    "time_target_agent_idle",
                    "always_use_max_channels",
                    "percentage_aggressiveness",
                    "working_schedule",
                    "dialing_schedule"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "Organization": {
                "properties": {
                    "id": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "active": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "code",
                    "description",
                    "active"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "PausePlan": {
                "properties": {
                    "id": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "active"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "Pause": {
                "properties": {
                    "id": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "quantity_allowed": {
                        "type": "number",
                        "format": "double"
                    },
                    "time_length": {
                        "type": "number",
                        "format": "double"
                    },
                    "active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "code",
                    "quantity_allowed",
                    "time_length",
                    "active"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "IdentityProviderUser": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "key_name": {
                        "type": "string"
                    },
                    "key_value": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "key_name",
                    "key_value"
                ],
                "type": "object",
                "additionalProperties": false
            },
            "User": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "identity_provider": {
                        "$ref": "#/components/schemas/IdentityProviderUser"
                    },
                    "direct_permissions": {},
                    "role_ids": {
                        "items": {},
                        "type": "array"
                    },
                    "user_name": {
                        "type": "string"
                    },
                    "is_agent": {
                        "type": "boolean"
                    },
                    "is_supervisor": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "identity_provider",
                    "direct_permissions",
                    "role_ids",
                    "user_name",
                    "is_agent",
                    "is_supervisor",
                    "active"
                ],
                "type": "object",
                "additionalProperties": false
            }
        },
        "securitySchemes": {}
    },
    "info": {
        "title": "olos-live",
        "version": "0.2.0",
        "description": "API for Config - OlosLive Plataform",
        "license": {
            "name": "All rights reserved to Olos Systems"
        },
        "contact": {
            "name": "TI Department",
            "email": "ti@olos.com.br",
            "url": "https://olos.com.br"
        },
        "termsOfService": "https://olos.com.br"
    },
    "openapi": "3.0.0",
    "paths": {
        "/api/config/organizations/{organizationId}/campaigns": {
            "get": {
                "operationId": "GetCampaignsByOrganization",
                "responses": {
                    "200": {
                        "description": "The organization was found"
                    }
                },
                "description": "Get campaigns bound to an organization\r\n\r\n<strong>Description</strong>:\r\nThis method gets a list of campaigns bound to an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>campaigns</strong>: A list of bound campaigns",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/{campaignId}/organizations": {
            "get": {
                "operationId": "GetOrganizationsByCampaign",
                "responses": {
                    "200": {
                        "description": "The organizations were found"
                    }
                },
                "description": "Get organizations bound to a campaign\r\n\r\n<strong>Description</strong>:\r\nThis method gets all organizations bound to a campaign\r\n\r\nThe pattern is GET: <strong>api/config/campaigns/{campaignId}/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>organizations</strong>: A list of bound organizations",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/campaigns/{campaignId}": {
            "post": {
                "operationId": "BindOrganizationToCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a campaign to an organization\r\n\r\n<strong>Description</strong>:\r\nThis method binds an organization to a campaign\r\n\r\nThe pattern is POST: <strong>api/config/organizations/{organizationId}/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: the campaign id\r\n   - <strong>organizationId</strong>: the organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindOrganizationFromCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind an organization from a campaign\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an organization from a campaign\r\n\r\nThe pattern is DELETE: <strong>api/config/?campaigns/{campaignId}/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/organizations/{organizationId}": {
            "post": {
                "operationId": "BindOrganizationToCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind organization to campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method binds an organization to many or to all campaigns\r\nIf you pass a list of campign ids in the body, only the campaigns in the list will be bound to the organization\r\nIf you don´t pass anything in the body, all campaigns will be bound to the organization\r\n\r\nThe pattern is Post: <strong>api/config/campaigns/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organization is\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of campaigns id</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaignIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaignIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindOrganizationFromCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind an organization from campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an organization from many or from all campaigns\r\nIf you pass a list of campaigns ids in the body, only the campaign in the list will be unbound from the organization\r\nIf you don´t pass anything in the body, all campaigns will be unbound from the organization\r\n\r\nThe pattern is DELETE: <strong>api/config/campaigns/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of campaign Ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaignIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaignIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/organizations/campaigns/{campaignId}": {
            "post": {
                "operationId": "BindCampaignToOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind campaign to organizations\r\n\r\n<strong>Description</strong>:\r\nThis method binds a campaign to many or to all organizations.\r\nIf you pass a list of organization ids in the body, only the organizations in the list will be bound to the campaign\r\nIf you don´t pass anything in the body, all organizations will be bound to the campaign\r\n\r\nThe pattern is POST: <strong>api/config/organizations/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: the campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of organization Ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindCampaignFromOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a campaign from organizations\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a campaign from many or from all organizations\r\n\r\nThe pattern is DELETE: <strong>api/config/organizations/campaigns/{campaignId}</strong>\r\nIf you pass a list of organization ids in the body, only the organizations in the list will be unbound from the campaign\r\nIf you don´t pass anything in the body, all organizations will be unbound from the campaign\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of organization ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauseplans/{pausePlanId}/campaigns": {
            "get": {
                "operationId": "GetCampaignsByPausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all campaigns bound to a pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method gets all campaigns bound to a pause plan\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/{pausePlanId}/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>campaigns/strong>: A list of campaigns",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/{campaignId}/pauseplans": {
            "get": {
                "operationId": "GetPausePlansByCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all pause plans bound to a campaign\r\n\r\n<strong>Description</strong>:\r\nThis method gets all pause plans bound to a campaign\r\n\r\nThe pattern is GET: <strong>api/config/campaigns/{campaignId}/pauseplans</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pausePlans</strong>: A list of pause plans",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauseplans/{pausePlanId}/campaigns/{campaignId}": {
            "post": {
                "operationId": "BindPausePlanToCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a campaign to a pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method binds a campaign to a pause plan\r\n\r\nThe pattern is POST: <strong>api/config/pauseplans/{pausePlanId}/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindPausePlanFromCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a campaign from a pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a campaign from a pause plan\r\n\r\nThe pattern is DELETE: <strong>api/config/pauseplans/{pausePlanId}/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of pause plan ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauseplans/campaigns/{campaignId}": {
            "post": {
                "operationId": "BindCampaignToPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a campaign to pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method binds a campaign to many or to all pause plans\r\nIf you pass a list of pause plan ids in the body, only the pause plans in the list will be bound from the campaign\r\nIf you don´t pass anything in the body, all pause plans will be bound from the campaign\r\n\r\nThe pattern is POST: <strong>api/config/pauseplans/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>a list of pause plan ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pausePlans": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pausePlans"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindCampaignFromAllPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a campaign from pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a campaign from many or from all pause plans\r\n\r\nThe pattern is DELETE: <strong>api/config/pauseplans/campaigns/{campaignId}</strong>\r\nIf you pass a list of pause plan ids in the body, only the pause plans in the list will be unbound from the campaign\r\nIf you don´t pass anything in the body, all pause plans will be unbound from the campaign\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of pause plan ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pausePlanIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pausePlanIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/campaigns/pauseplans/{pausePlanId}": {
            "post": {
                "operationId": "BindPausePlanToCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause plan to campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause plan to many or to all campaigns\r\nIf you pass a list of campaign ids in the body, only the campaigns in the list will be bound from the campaign\r\nIf you don´t pass anything in the body, all campaigns will be bound from the campaign\r\n\r\nThe pattern is POST: <strong>api/config/campaigns/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of campaign ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaigns": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaigns"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindPausePlanFromAllCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause plan from campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause plan from many or from all campaigns\r\n\r\nThe pattern is DELETE: <strong>api/config/campaigns/pauseplans/{pausePlanId}</strong>\r\nIf you pass a list of campaign ids in the body, only the campaigns in the list will be unbound from the campaign\r\nIf you don´t pass anything in the body, all campaign will be unbound from the campaign\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of campaign ids</strong> *OPTIONAL\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaigns": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaigns"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/users/{userId}/campaigns": {
            "get": {
                "operationId": "GetCampaignsByUser",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get campaign by user\r\n\r\n<strong>Description</strong>:\r\nThis method gets a campaign object by an user id\r\n\r\nThe pattern is GET: <strong>api/config/users/{userId}/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/{campaignId}/users": {
            "get": {
                "operationId": "GetUsersByCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get users by campaign\r\n\r\n<strong>Description</strong>:\r\nThis method WHAT get the user object bya given campaign id\r\n\r\nThe pattern is GET: <strong>api/config/campaigns/{campaignId}/users</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/{campaignId}/users/{userId}": {
            "post": {
                "operationId": "BindUserToCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind user to campaign\r\n\r\n<strong>Description</strong>:\r\nThis method binds an user to a campaign\r\n\r\nThe pattern is POST <strong>api/config/campaigns/{campaignId}/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindUserFromCampaign",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind user from campaign\r\n\r\n<strong>Description</strong>:\r\nThis method an user from a campaign\r\n\r\nThe pattern is DELETE: <strong>api/config/campaigns/{campaignId}/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns/users/{userId}": {
            "post": {
                "operationId": "BindUserToCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind users to campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method binds an user to many or to all campaigns\r\nIf you pass a list of campaign ids in the body, only the campaigns in the list will be bound from the user\r\nIf you don´t pass anything in the body, all campaigns will be bound from the user\r\n\r\nThe pattern is POST: <strong>api/config/campaigns/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n- <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n- <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of campaign ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaignIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaignIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindUserFromCampaigns",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind user from campaigns\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an user from all campaigns\r\n\r\nThe pattern is DELETE: <strong>api/config/campaigns/users/{userId}</strong>\r\nIf you pass a list of campaign ids in the body, only the campaigns in the list will be unbound from the user\r\nIf you don´t pass anything in the body, all campaigns will be unbound from the user\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of campaign ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaignIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "campaignIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/users/campaigns/{campaignId}": {
            "post": {
                "operationId": "BindCampaignToUsers",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind campaign to users\r\n\r\n<strong>Description</strong>:\r\nThis method binds a campaign to many or to all users\r\n\r\nThe pattern is POST: <strong>api/config/users/campaigns/{campaignId}</strong>\r\nIf you pass a list of user ids in the body, only the users in the list will be bound from the campaign\r\nIf you don´t pass anything in the body, all users will be bound from the campaign\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of user ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "userIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindCampaignFromUsers",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind campaign from users\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a campaign from all users\r\nIf you pass a list of user ids in the body, only the users in the list will be unbound from the campaign\r\nIf you don´t pass anything in the body, all users will be unbound from the campaign\r\n\r\nThe pattern is DELETE: <strong>api/config/users/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: The campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of user ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "userIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/campaigns/{campaignId}": {
            "get": {
                "operationId": "GetCampaignById",
                "responses": {
                    "200": {
                        "description": "The campaign was found"
                    }
                },
                "description": "Retrieves a campaign information\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves a campaign by a given id\r\n\r\nThe pattern is GET: <strong>api/config/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: the campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>campaign</strong>: the found campaign object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeleteCampaign",
                "responses": {
                    "200": {
                        "description": "The campaign was updated"
                    }
                },
                "description": "Delete a campaign\r\n\r\n<strong>Description</strong>:\r\nThis method receives a campaign id and delete the campaign from the database\r\n\r\nThe pattern is: DELETE: <strong>api/config/campaigns/{campaignId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>campaignId</strong>: the campaign id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "campaignId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/campaigns": {
            "get": {
                "operationId": "GetCampaigns",
                "responses": {
                    "200": {
                        "description": "The campaigns were found"
                    }
                },
                "description": "Retrieves all campaigns from the tenant´s database\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves all campaigns from a given tenant\r\n\r\nThe pattern is: GET: <strong>api/config/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>campaigns</strong>: a list of campaigns in the given tenant",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UpdateCampaign",
                "responses": {
                    "200": {
                        "description": "The campaign was updated"
                    }
                },
                "description": "Update a campaign\r\n\r\n<strong>Description</strong>:\r\nThis method receives a campaign object and update the database\r\n\r\nThe pattern is PUT: <strong>api/config/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>campaign</strong>: the campaign object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaign": {
                                        "$ref": "#/components/schemas/Campaign"
                                    }
                                },
                                "required": [
                                    "campaign"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "AddCampaign",
                "responses": {
                    "200": {
                        "description": "The campaign was added"
                    }
                },
                "description": "Add a new campaign into the database\r\n\r\n<strong>Description</strong>:\r\nThis method receives a campaign object and add a new registry into the database\r\n\r\nThe pattern is: POST: <strong>api/config/campaigns</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>campaign</strong>: the campaign object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>campaignId</strong>: the newly created campaign id",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "campaign": {
                                        "$ref": "#/components/schemas/Campaign"
                                    }
                                },
                                "required": [
                                    "campaign"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauseplans/{pausePlanId}/organizations": {
            "get": {
                "operationId": "GetOrganizationsByPausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all organizations of a pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method gets all campaigns bound to a pause plan\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/{pausePlanId}/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>organizations<strong>: A list of organizations",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/pauseplans": {
            "get": {
                "operationId": "GetPausePlansByOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all pause plans of an organization\r\n\r\n<strong>Description</strong>:\r\nThis method gets all campaigns bound to a pause plan\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauseplans</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pausePlans<strong>: A list of pause plans",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/pauseplans/{pausePlanId}": {
            "post": {
                "operationId": "BindPausePlanToOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause plan to an organization\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause plan to an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindPausePlanFromOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause plan from an organization\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause plan from an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/pauseplans/{pausePlanId}": {
            "post": {
                "operationId": "BindPausePlanToOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause plan to organizations\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause plan to many or to all orgzanizations\r\n\r\nThe pattern is GET: <strong>api/config/organizations/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of oganizations</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>none<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindPausePlanFromAllOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause plan from organizations\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause plan from many or from all organizations\r\n\r\nThe pattern is GET: <strong>api/config/organizations/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>organizationIds</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauseplans/organizations/{organizationId}": {
            "post": {
                "operationId": "BindOrganizationToPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind an organization to pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method binds an organization to many or to all pause plans\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/organizations/{organizationId}s</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of plan pause ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pausePlanIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pausePlanIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindOrganizationFromAllPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind an organization from pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an organization from many or from all pause plans\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pause plan ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong></strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pausePlanIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pausePlanIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauses/{pauseId}/organizations": {
            "get": {
                "operationId": "GetOrganizationsByPause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all organizations of a pause\r\n\r\n<strong>Description</strong>:\r\nThis method gets all organizations bound to a pause\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>organizations<strong>: A list of organizations",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/pauses": {
            "get": {
                "operationId": "GetPausesByOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all pauses of an organization\r\n\r\n<strong>Description</strong>:\r\nThis method gets all pauses bound to an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/pauses/{pauseId}": {
            "post": {
                "operationId": "BindPauseToOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause to an organization\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause to an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindPauseFromOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause from an organization\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause from an organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: The pause id\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/pauses/{pauseId}": {
            "post": {
                "operationId": "BindPauseToOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause to organizations\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause to many or to all organizations\r\n\r\nThe pattern is GET: <strong>api/config/organizations/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of organization ids/strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong><strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindPauseFromAllOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause from organizations\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause from many or from all organization\r\n\r\nThe pattern is GET: <strong>api/config/organizations/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of organization ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong><strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organizationIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "organizationIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauses/organizations/{organizationId}": {
            "post": {
                "operationId": "BindOrganizationToPauses",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind an organization to pause\r\n\r\n<strong>Description</strong>:\r\nThis method binds an organization to many or to all pauses\r\n\r\nThe pattern is GET: <strong>api/config/pauses/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pause ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>Nonestrong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pauseIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pauseIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindOrganizationFromAllPauses",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind an organization from pauses\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an organization from many or from all pauses\r\n\r\nThe pattern is GET: <strong>api/config/pauses/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pauses ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pauseIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pauseIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/users/{userId}/organizations": {
            "get": {
                "operationId": "GetOrganizationsByUser",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get an organization by user\r\n\r\n<strong>Description</strong>:\r\nThis method get an organization by a given user id\r\n\r\nThe pattern is GET: <strong>api/config/users/{userId}/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/users": {
            "get": {
                "operationId": "GetUsersByOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get user by organization\r\n\r\n<strong>Description</strong>:\r\nThis method gets all users of a given organization\r\n\r\nThe pattern is Get: <strong>api/config/organizations/{organizationId}/users</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}/users/{userId}": {
            "post": {
                "operationId": "BindUserToOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind user to organization\r\n\r\n<strong>Description</strong>:\r\nThis method bind an user to an orgzanization by their ids\r\n\r\nThe pattern is POST: <strong>api/config/organizations/{organizationId}/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindUserFromOrganization",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind user from an organization\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an user from an organization\r\n\r\nThe pattern is DELETE <strong>api/config/organizations/{organizationId}/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/users/{userId}": {
            "post": {
                "operationId": "BindUserToOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind user to organizations\r\n\r\n<strong>Description</strong>:\r\nThis method binds an user to all organizations\r\n\r\nThe pattern is POST: <strong>api/config/organizations/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindUserFromOrganizations",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind user from organizations\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an user from all organizations\r\n\r\nThe pattern is DELETE: <strong>api/config/organizations/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: The user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/users/organizations/{organizationId}": {
            "post": {
                "operationId": "BindOrganizationToUsers",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind organization to users\r\n\r\n<strong>Description</strong>:\r\nThis method binds an organization to all users\r\n\r\nThe pattern is POST: <strong>api/config/users/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindOrganizationFromUsers",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind organization from users\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an organization from all users\r\n\r\nThe pattern is DELETE: <strong>api/config/users/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: The organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations/{organizationId}": {
            "get": {
                "operationId": "GetOrganizationById",
                "responses": {
                    "200": {
                        "description": "The organization was found"
                    }
                },
                "description": "Retrieves an organization object\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves an organization by a given id\r\n\r\nThe pattern is GET: <strong>api/config/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organization id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>organization</strong>: the found organization object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeleteOrganization",
                "responses": {
                    "200": {
                        "description": "The organization was updated"
                    }
                },
                "description": "Delete an organization\r\n\r\n<strong>Description</strong>:\r\nThis method receives an organization id and delete the organization from the database\r\n\r\nThe pattern is: DELETE: <strong>api/config/organizations/{organizationId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organizatio id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information received in the <strong>response Body</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "organizationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/organizations": {
            "get": {
                "operationId": "GetOrganizations",
                "responses": {
                    "200": {
                        "description": "The organizations were found"
                    }
                },
                "description": "Retrieves all organizations from the tenant´s database\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves all organizations from a given tenant\r\n\r\nThe pattern is: GET: <strong>api/config/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>organizations</strong>: a list of organizations in the given tenant",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UpdateOrganization",
                "responses": {
                    "200": {
                        "description": "The organization was updated"
                    }
                },
                "description": "Update a organization\r\n\r\n<strong>Description</strong>:\r\nThis method receives a organization object and update the database\r\n\r\nThe pattern is PUT: <strong>api/config/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request body</strong>\r\n   - <strong>organization</strong>: the organization object\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organization": {
                                        "$ref": "#/components/schemas/Organization"
                                    }
                                },
                                "required": [
                                    "organization"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "AddOrganization",
                "responses": {
                    "200": {
                        "description": "The organization was added"
                    }
                },
                "description": "Add a new organization into the database\r\n\r\n<strong>Description</strong>:\r\nThis endpoint receives a organization object and add a new registry into the database\r\n\r\nThe pattern is: POST: <strong>api/config/organizations</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request body</strong>\r\n   - <strong>organization</strong>: the organization object\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>organizationId</strong>: the new created organization id",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "organization": {
                                        "$ref": "#/components/schemas/Organization"
                                    }
                                },
                                "required": [
                                    "organization"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauseplans/{pausePlanId}": {
            "get": {
                "operationId": "GetPausePlanById",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Retrieves a pause plan object\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves a pause plan by a given id\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organizatio id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pause plan</strong>: the found Pause plan object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeletePausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Delete a Pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method receives a pause plan id and deletes the pause plan from the database\r\n\r\nThe pattern is: DELETE: <strong>api/config/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: the pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauseplans": {
            "get": {
                "operationId": "GetPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Retrieves all pauses from the tenant database\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves all pauses from a given tenant\r\n\r\nThe pattern is: GET: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pauses</strong>: a list of pauses in the given tenant",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UpdatePausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Update a Pause plan object\r\n\r\n<strong>Description</strong>:\r\nThis endpoint receives a pause plan object and updates the database\r\n\r\nThe pattern is PUT: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>pause plan</strong>: the pause plan object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "$ref": "#/components/schemas/PausePlan"
                                    }
                                },
                                "required": [
                                    "user"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "AddPausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Add a new Pause plan into the database\r\n\r\n<strong>Description</strong>:\r\nThis method receives a pause plan object and adds it as a new registry into the database\r\n\r\nThe pattern is: POST: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>pause plan</strong>: the pause plan object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pauseId</strong>: the id o the newly created pause plan",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "$ref": "#/components/schemas/PausePlan"
                                    }
                                },
                                "required": [
                                    "user"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauseplans/{pausePlanId}/pauses": {
            "get": {
                "operationId": "GetPausesByPausePlan",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all pauses bound to a pause plan\r\n\r\n<strong>Description</strong>:\r\nThis method gets all campaigns bound to a pause plan\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/{pausePlanId}/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pauses<strong>: A list of pauses",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauses/{pauseId}/pauseplans": {
            "get": {
                "operationId": "GetPausePlansByPause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get all pause plans bound to a pause\r\n\r\n<strong>Description</strong>:\r\nThis method gets all campaigns bound to a pause plan\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}/pauseplans</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pausePlans<strong>: A list of pause plans",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauses/{pauseId}/pauseplans/{pausePlanId}": {
            "post": {
                "operationId": "BindPausePlanToPause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause plan to an pause\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause plan to an pause\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None<strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindPausePlanFromPause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause plan from a pause\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause plan from a a pause\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauseplans/pauses/{pauseId}": {
            "post": {
                "operationId": "BindPausePlanToPauses",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind an pause to pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method binds an pause to many or to all pause plans\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/pauses/{pauseId}s</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pause plan ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UnbindPauseFromAllPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind an pause from pause plans\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds an pause from many or from all pause plans\r\n\r\nThe pattern is GET: <strong>api/config/pauseplans/pauses/{pauseId}'</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: The pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pause plan ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong></strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pausePlanIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pausePlanIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauses/pauseplans/{pausePlanId}": {
            "post": {
                "operationId": "BindPauseToPausePlans",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Bind a pause plan to pauses\r\n\r\n<strong>Description</strong>:\r\nThis method binds a pause plan to many or to pause plan\r\n\r\nThe pattern is GET: <strong>api/config/pauses/pauseplans/{pausePlanId</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>A list of pauses ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pauseIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pauseIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "UnbindPausePlanFromAllPauses",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Unbind a pause plan from pauses\r\n\r\n<strong>Description</strong>:\r\nThis method unbinds a pause plan from many or from all pauses\r\n\r\nThe pattern is DELETE: <strong>api/config/pauses/pauseplans/{pausePlanId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pausePlanId</strong>: The pause plan id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong> *OPTIONAL\r\n   - <strong>A list of pause ids</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pausePlanId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pauseIds": {
                                        "items": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "pauseIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/pauses/{pauseId}": {
            "get": {
                "operationId": "GetPauseById",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Retrieves a pause object\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves a pause by a given id\r\n\r\nThe pattern is GET: <strong>api/config/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organizatio id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pause</strong>: the found Pause object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeletePause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Delete a Pause\r\n\r\n<strong>Description</strong>:\r\nThis method receives a pause id and deletes the pause from the database\r\n\r\nThe pattern is: DELETE: <strong>api/config/pauses/{pauseId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>pauseId</strong>: the pause id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pauseId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/pauses": {
            "get": {
                "operationId": "GetPauses",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Retrieves all pauses from the tenant database\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves all pauses from a given tenant\r\n\r\nThe pattern is: GET: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pauses</strong>: a list of pauses in the given tenant",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UpdatePause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Update a Pause object\r\n\r\n<strong>Description</strong>:\r\nThis endpoint receives a pause object and updates the database\r\n\r\nThe pattern is PUT: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>pause</strong>: the pause object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pause": {
                                        "$ref": "#/components/schemas/Pause"
                                    }
                                },
                                "required": [
                                    "pause"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "AddPause",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Add a new Pause into the database\r\n\r\n<strong>Description</strong>:\r\nThis method receives a pause object and adds it as a new registry into the database\r\n\r\nThe pattern is: POST: <strong>api/config/pauses</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>pause</strong>: the pause object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>pauseId</strong>: the id o the newly created pause",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pause": {
                                        "$ref": "#/components/schemas/Pause"
                                    }
                                },
                                "required": [
                                    "pause"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/config/place/cities/{cityId}": {
            "get": {
                "operationId": "GetCityById",
                "responses": {
                    "200": {
                        "description": "The city was found"
                    }
                },
                "description": "Get a city by Id\r\n\r\n<strong>Description</strong>:\r\nThis method gets a city object by a given id. All cities are linked to a state\r\n\r\nThe route is: GET <strong>api/config/place/cities/{cityId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>city</strong>: a city object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cityId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/place/states/{stateId}": {
            "get": {
                "operationId": "GetStateById",
                "responses": {
                    "200": {
                        "description": "The state was found"
                    }
                },
                "description": "Get a state by Id\r\n\r\n<strong>Description</strong>:\r\nThis method gets a state object by a given id. All states are linked to a country\r\n\r\nThe route is: GET <strong>api/config/place/states/{stateId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>state</strong>: a state object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "stateId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/place/countries/{countryId}": {
            "get": {
                "operationId": "GetCountryById",
                "responses": {
                    "200": {
                        "description": "The country was found"
                    }
                },
                "description": "Get a country by Id\r\n\r\n<strong>Description</strong>:\r\nThis method gets a country object by a given id.\r\n\r\nThe route is: GET <strong>api/config/place/countries/{countryId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>country</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "countryId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/place/countries": {
            "get": {
                "operationId": "GetAllCountries",
                "responses": {
                    "200": {
                        "description": "The countries were found"
                    }
                },
                "description": "Get a all countries\r\n\r\n<strong>Description</strong>:\r\nThis method gets all countries existing in the database.\r\n\r\nThe route is: GET <strong>api/config/place/countries</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>state</strong>: a state object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/place/countries/{countryId}/states": {
            "get": {
                "operationId": "GetStatesByCountryId",
                "responses": {
                    "200": {
                        "description": "The states were found"
                    }
                },
                "description": "Get a all states of a country\r\n\r\n<strong>Description</strong>:\r\nThis method gets all states of a given country.\r\n\r\nThe route is: GET <strong>api/config/place/countries/{countryId}/states</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>states</strong>: a list of state objects",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "countryId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/place/states/{stateId}/cities": {
            "get": {
                "operationId": "GetCitiesByStateId",
                "responses": {
                    "200": {
                        "description": "The cities were found"
                    }
                },
                "description": "Get a all cities of a state\r\n\r\n<strong>Description</strong>:\r\nThis method gets all cities of a given state.\r\n\r\nThe route is: GET <strong>api/config/place/states/{stateId}/cities</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>CITIES</strong>: a list of CITIES objects",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "stateId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/test": {
            "get": {
                "operationId": "TestConfigApi",
                "responses": {
                    "200": {
                        "description": "The API is up and running"
                    }
                },
                "description": "Test if the API is up and running\r\n\r\n<strong>Description</strong>:\r\nCall this endpoint whenever you want to be sure that the config service is correctly running\r\n\r\nThe route is: <strong>api/config/test</strong>\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- No information needed in the <strong>request body</strong>\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>message</strong>: \"Hello from OlosLive. The Config Service API is up and running.\"",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/health": {
            "get": {
                "operationId": "ConfigHealthCheck",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "description": "Health Check by AWS\r\n\r\n<strong>Description</strong>:\r\nAWS Target Group call this endpoint to check the health of the service\r\n\r\nThe route is: <strong>api/config/health</strong>\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- No information needed in the <strong>request body</strong>\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>message</strong>: \"OK\"",
                "security": [],
                "parameters": []
            }
        },
        "/api/config/users/{userId}": {
            "get": {
                "operationId": "GetUserById",
                "responses": {
                    "200": {
                        "description": "The user was found"
                    },
                    "404": {
                        "description": "NOT FOUND",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "description": "Retrieves an user object\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves an user by a given id\r\n\r\nThe pattern is GET: <strong>api/config/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>organizationId</strong>: the organizatio id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>user</strong>: the found User object",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeleteUser",
                "responses": {
                    "200": {
                        "description": "The user was deleted"
                    }
                },
                "description": "Delete a User\r\n\r\n<strong>Description</strong>:\r\nThis method receives an user id and deletes the user from the database\r\n\r\nThe pattern is: DELETE: <strong>api/config/users/{userId}</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Parameter needed in the <strong>URL</strong>\r\n   - <strong>userId</strong>: the user id\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/config/users": {
            "get": {
                "operationId": "GetUsers",
                "responses": {
                    "200": {
                        "description": "The users were found"
                    }
                },
                "description": "Retrieves all users from the tenant database\r\n\r\n<strong>Description</strong>:\r\nThis method retrieves all users from a given tenant\r\n\r\nThe pattern is: GET: <strong>api/config/users</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>None</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>users</strong>: a list of users in the given tenant",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UpdateUser",
                "responses": {
                    "200": {
                        "description": "The user was updated"
                    }
                },
                "description": "Update an User object\r\n\r\n<strong>Description</strong>:\r\nThis endpoint receives an user object and updates the database\r\n\r\nThe pattern is PUT: <strong>api/config/users</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>user</strong>: the user object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>None</strong>",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "required": [
                                    "user"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "AddUser",
                "responses": {
                    "200": {
                        "description": "The user was added"
                    }
                },
                "description": "Add a new User into the database\r\n\r\n<strong>Description</strong>:\r\nThis method receives an user object and adds it as a new registry into the database\r\n\r\nThe pattern is: POST: <strong>api/config/users</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>user</strong>: the user object\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>userId</strong>: the id o the newly created user",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "required": [
                                    "user"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/login/idps/{idpName}": {
            "get": {
                "operationId": "GetIdentityProvider",
                "responses": {
                    "200": {
                        "description": "The identity provider was found"
                    }
                },
                "description": "Gets the key name of the tenant´s identity provider broker\r\n\r\n<strong>Description</strong>:\r\nOnce OlosLive doesn´t use password to authenticate the user,\r\n(this task is performed by the idp), the LoginService needs a unique key\r\nvalue to match to the credentials sent by the idp.\r\n\r\nThe route is Post: <strong>api/login/idp</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authorization header with a valid Bearer access token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>:\r\n   - <strong>idpName</strong>: Broker name (i.e.: 'firebase')\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>key_name</strong>: the new valid refresh_token",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "idpName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/login/refresh_token": {
            "post": {
                "operationId": "GetRefreshToken",
                "responses": {
                    "200": {
                        "description": "The refresh token was sent"
                    }
                },
                "description": "Retrieves a new pair of tokens: Access Token and RefreshToken\r\n\r\n<strong>Description</strong>:\r\nWhen the access token is to be expired, the client can\r\nask for a new one. To do so, it has to sent the refresh token\r\nthat was received in the last interaction with the LoginService.\r\nIf both access and refresh tokens are valid, the Login service\r\nsends a new pair to the client with a new expiration time\r\n\r\nThe route is POST: <strong>api/refresh_token</strong>\r\n\r\n- <strong>Security</strong>: The client must be logged. The request object must have an Authotization header with a Bearer token\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n- <strong>tenantId</strong>: the tenant id\r\n\r\n- Information needed in the <strong>request BODY</strong>:\r\n   - <strong>id</strong>: user identification\r\n   - <strong>refresh_token</strong>: the last received refresh_token\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>access_token</strong>: the new valid access token\r\n   - <strong>refresh_token</strong>: the new valid refresh_token",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "refresh_token": {
                                        "type": "string"
                                    },
                                    "id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "refresh_token",
                                    "id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/login/tenants": {
            "get": {
                "operationId": "GetTenantByName",
                "responses": {
                    "200": {
                        "description": "The tenant was found"
                    }
                },
                "description": "Retrieves the identity provider linked to the tenant\r\n\r\n<strong>Description</strong>:\r\nWhen the user is entering the OlosLive, the login service has to tell the client\r\nwhat the right dialog box is for the uset types the credentials. To do it, the service\r\nuses the tenant's name given in the url and searchs the corresponding idp in database.\r\n\r\nThe pattern is GET: <strong>api/login</strong>\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- No information needed in the <strong>request BODY</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>id</strong>: tenant identification\r\n   - <strong>provider</strong>: an object including the broker´s name and a list of identity providers",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/login/test": {
            "get": {
                "operationId": "TestLoginApi",
                "responses": {
                    "200": {
                        "description": "The API is up and running"
                    }
                },
                "description": "Test if the Login API is up and running\r\n\r\n<strong>Description</strong>:\r\nCall this endpoint to be sure that the Login Service is correctly running\r\n\r\nThe route is GET: <strong>api/login/test</strong>\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- No information needed in the <strong>request BODY</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>message</strong>: \"Hello from OlosLive. The Login Service API is up and running.\"",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/login/health": {
            "get": {
                "operationId": "LoginHealthCheck",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "description": "Health Check by AWS\r\n\r\n<strong>Description</strong>:\r\nAWS Target Group call this endpoint to check the health of the service\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- No information needed in the <strong>request body</strong>\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>message</strong>: \"OK\"",
                "security": [],
                "parameters": []
            }
        },
        "/api/login": {
            "post": {
                "operationId": "GetTenantUser",
                "responses": {
                    "200": {
                        "description": "The user was found"
                    }
                },
                "description": "Retrieves the user identification\r\n\r\n<strong>Description</strong>:\r\nAfter the successful process of getting the tenant id and the broker´s name,\r\nthe client sends back to the LoginService the tenant id\r\nas well as the broker name. This is necessary to give the broker´s\r\nname because the client needs to know what key name\r\nthe broker uses to uniquely identify the user. For example,\r\nFirebase uses the email for this purpose, but other brokers can\r\nuse different key, like username or the company id\r\n\r\nThe pattern is GET: <strong>api/login</strong>\r\n\r\n- <strong>Security</strong>: the client has to send the IdP access token to be verified\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n   - <strong>Authorization</strong>: the firebase token\r\n\r\n- Information needed in the <strong>request BODY</strong>\r\n   - <strong>idpName</strong>: the identity provider broker unique name\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>id</strong>: user identification\r\n   - <strong>status</strong>: a string with the user status (active or inactive)\r\n   - <strong>refresh_token</strong>: a JWT token to be used by the client to ask for\r\na new access token when it is about to be expired",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "idpName": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "idpName"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/monitor/test": {
            "get": {
                "operationId": "TestMonitorApi",
                "responses": {
                    "200": {
                        "description": "The API is up and running"
                    }
                },
                "description": "Test if the monitor API is up and running\r\n\r\n<strong>Description</strong>:\r\nCall this endpoint to be sure that the monitor Service is correctly running\r\n\r\nThe route is GET: <strong>api/monitor/test</strong>\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- Information needed in the <strong>request HEADER</strong>\r\n   - <strong>tenantId</strong>: the tenant´s id\r\n\r\n- No information needed in the <strong>request BODY</strong>\r\n\r\n- Information received in the <strong>response BODY</strong>\r\n   - <strong>message</strong>: \"Hello from OlosLive. The monitor Service API is up and running.\"",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "tenant-id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/monitor/health": {
            "get": {
                "operationId": "MonitorHealthCheck",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "description": "Health Check by AWS\r\n\r\n<strong>Description</strong>:\r\nAWS Target Group call this endpoint to check the health of the service\r\n\r\nThe route is: <strong>api/config/health</strong>\r\n\r\n- <strong>Security</strong>: no need to be logged in\r\n\r\n- No information needed in the <strong>request body</strong>\r\n\r\n- Information received in the <strong>response body</strong>\r\n   - <strong>message</strong>: \"OK\"",
                "security": [],
                "parameters": []
            }
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ]
}